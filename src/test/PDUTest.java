package test;

import main.PDU.SMS;
import main.Utility;
import org.junit.Test;

import java.io.IOException;
import java.io.RandomAccessFile;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

/**
 * Created by Anders on 11.07.16.
 */
public class PDUTest {

    @Test
    public void testSMSSubmit() {
        SMS sms = new SMS("050011550A9174000000000000AD2BC533A80C3287CB6E10FC0122BF41EF33882C4F93CB2C5019345F87DBE230199406B5C3E7B21BFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF91C56E1EFFFFFFFFA6A4");
        assertEquals("Eg e faen på do og dride, e skambad i magen", sms.getText());
    }

    @Test
    public void testSMSDeliver() {
        SMS sms = new SMS("0106917409001200040A9174000000000000611010708260001D48FB5B4E0EBB41E7871C442ED341ED321984AECFD9E57418F403FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF6FF04A3C7DC2BA319BBAE919B2A8F517083681599DC7553955C6A6DA17CA19A8F22252864350FC0477C82EEEA3FCB7F9040D92D05176032CDD37BB200FF7B603AC8101626A25EB048BF7966E67625F95BD1682D");
        assertEquals("Hvordan går det med husleia ?", sms.getText());
    }

    @Test
    public void testSMSUTF8() {
        SMS sms = new SMS("0106917400000171040A9174000000000008611010313350002A004800650069002000680076006F007200640061006E0020006700E5007200200064006500740071263AFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000004C6F");
        assertEquals("Hei hvordan går detq☺", sms.getText());
    }

    @Test
    public void testSMSWithUDHI() {
        SMS sms = new SMS("0106917400000010400A917400000000000061101070530500A00500032D0201906139680EAFCBE9A0771B145CCCC561D03AEC06ADD50C7919442ED341F4341B442E9F416910397C6681EC6537BD2C07C11FA0B93D2C7781887550FB015ABFDBED32C85D2683CA6E10BD2E07A541E4F019F43E83E6E9B3BB2C2F83E00F90FB5D7683E061785A5E9683D220F35B2E4EBBC965F6BC0C6A97C9207639CD4E9FD1657AD90D823F40FFFFFFFFFFFFFFFFFFFF0000000000000000455A");
        assertTrue(sms.getFirstOctet().getTP_UDHI());
        assertTrue(sms.getTimeStamp().contains("01.01.2016 07:35:50"));
        assertEquals("Har spurt om AØsba kan kjøre det til deg i dag, venter på svar. Du må komme ned en tur i dag og signere på noen papirer i forbindelse med leiligheten på ", sms.getText());
    }

    @Test
    public void testXORKey() throws IOException {
        //Read XOR-key
        String XORKeyFilename = "encryptionkey.bin";
        RandomAccessFile XorKeyFile = new RandomAccessFile(XORKeyFilename, "r");
        byte[] XORKey = new byte[(int) XorKeyFile.length()];
        XorKeyFile.readFully(XORKey);

        //Input
        byte[] SMSBytes = Utility.hexStringToByteArray("7CC99DA10000006F62AC31CDA00000005BAF32F7EC947C40D4ED1F58F33B529742386D36E801D2462A11723F733032B8D63EC5D387B5AE07A935CA24F86844A82D83D76BCCCCFFF3C405A507A4132A233FB22F99FD5AD31FC13A4B364C84E7B44779B4D58D5C664963DE2CD5E4A7AD2FD0A06BCE3BD72FD8D0C620B423D510211616DB05D9EDF95748440F5F66A8201AE7B3B6649126C8178F78485B2B78849B3CF445C2475B00F128211097739C6395AFB13EAFFF1B6336EF36");
        byte[] SMSBytesAfterXOR;

        //Decode input
        SMSBytesAfterXOR = new byte[SMSBytes.length];
        for (int i = 0; i < SMSBytes.length; i++) {
            SMSBytesAfterXOR[i] = (byte) (SMSBytes[i] ^ XORKey[i % XORKey.length]);
        }

        //Read PDU
        SMS sms = new SMS(SMSBytesAfterXOR);
        assertEquals("Hei.nu ska eg snart avgårde og prøva å få tak i øn8ld.han ser eg ringe.men svare søren meg ikke.nok er nok altså.", sms.getText());
    }
}
